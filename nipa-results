#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import json
import errno
import os
import sys
import requests
import gzip
import shutil
import yaml

from datetime import datetime

DEFAULT_OUTPUT_DIR = "netdev-results"
RESULTS_SERVER = "https://storage.kernelci.org/netdev-results"
JSONS_FOLDER = "jsons"
RESULTS_FOLDER = "results"
RESULTS_MANIFEST = "results.json"
KERNELCI_EXECUTOR = "kernelci-lava-collabora"

MAESTRO_PROD_API = "https://kernelci-api.westus3.cloudapp.azure.com/"
MAESTRO_STAGING_API = "https://staging.kernelci.org:9000/"
MAESTRO_API = MAESTRO_PROD_API

def load_json(file_path):
    """Load JSON data from a file, returning an empty list if the file doesn't exist or is invalid."""
    if not os.path.exists(file_path):
        return []
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError):
        return []


def save_json(file_path, data):
    """Save JSON data to a file."""
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def maestro_fetch_children_nodes(url, node):
    """Query Maestro nodes with a given query."""
    headers = {
        "Content-Type": "application/json; charset=utf-8",
    }
    query = f"parent={node['id']}"
    url = url + "latest/nodes/fast?" + query
    response = requests.get(url, headers=headers)
    try:
        response.raise_for_status()
    except requests.exceptions.HTTPError as ex:
        print(ex.response.json().get("detail"), file=sys.stderr)
        sys.exit(errno.ENOENT)

    return response.json()


def maestro_fetch_node(url, nodeid):
    headers = {
        "Content-Type": "application/json; charset=utf-8",
    }
    url = url + "latest/node/" + nodeid
    response = requests.get(url, headers=headers)
    try:
        response.raise_for_status()
    except requests.exceptions.HTTPError as ex:
        print(ex.response.json().get("detail"), file=sys.stderr)
        sys.exit(errno.ENOENT)
    except Exception as ex:
        print(ex, file=sys.stderr)
        sys.exit(errno.ENOENT)

    return response.json()


def convert_to_nipa_timestamp(timestamp):
    """Convert ISO 8601 timestamp to the required format with timezone."""
    dt = datetime.fromisoformat(timestamp)
    return dt.strftime("%Y-%m-%d %H:%M:%S.%f+00:00")


def download_and_extract_log(folder, url):
    """Download a log file, check if it's gzip-compressed, and extract it."""
    response = requests.get(url, stream=True)
    response.raise_for_status()  # Raise error if request fails

    temp_gz_file = "node.gz"
    log_file = os.path.join(folder, "full_log")

    with open(temp_gz_file, "wb") as f:
        f.write(response.content)

    with open(temp_gz_file, "rb") as f:
        if f.read(2) == b"\x1f\x8b":  # Gzip magic number
            with gzip.open(temp_gz_file, "rb") as gz_file, open(log_file, "wb") as log_file:
                shutil.copyfileobj(gz_file, log_file)
            print(f"Extracted log saved to {log_file.name}")
        else:
            print("Downloaded file is not a valid gzip archive.")

    os.remove(temp_gz_file)


def add_dashboard_link_file(folder, id):
    log_file = os.path.join(folder, "kernelci_dashboard.txt")
    link = f"http://d.kernelci.org/test/maestro:{id}"

    with open(log_file, "w") as f:
        f.write(link)


def add_to_manifest(jsons_folder, results, branch):
    file_path = os.path.join(jsons_folder, RESULTS_MANIFEST)

    manifest = load_json(file_path)

    # NOTE: According to the NIPA docs:
    # https://github.com/linux-netdev/nipa/wiki/Netdev-CI-system
    #
    # We shouldn't fill in url until all the results are done.
    # For now we are filling it right away, but we will have
    # to revisit it sometime soon.
    url = f"{RESULTS_SERVER}/{JSONS_FOLDER}/{results}"

    new_entry = {
        "url": url,
        "branch": branch,
        "executor": KERNELCI_EXECUTOR
    }
    manifest.append(new_entry)

    save_json(file_path, manifest)
    print(f"Entry added to {file_path}")
    return True


def results_exist_in_manifest(jsons_folder, node_id):
    file_path = os.path.join(jsons_folder, RESULTS_MANIFEST)
    manifest = load_json(file_path)

    if any(node_id in entry.get("url") for entry in manifest):
        print(f"Entry for {node_id} already exists in {file_path}")
        return True

    return False


def create_results_file(output, branch, start, end, results_id, device_info):
    os.makedirs(output, exist_ok=True)

    file_name = f"results-{results_id}.json"
    file_path = os.path.join(output, file_name)

    results_data = {
        "executor": KERNELCI_EXECUTOR,
        "branch": branch,
        "start": start,
        "end": end,
        "results": [],
        "link": f"{RESULTS_SERVER}/{RESULTS_FOLDER}/{results_id}/",
        "device": device_info
    }

    save_json(file_path, results_data)
    print(f"Results file created: {file_path}")
    return file_name


def add_result(output, results_id, group, test, result, folder_name):
    """Appends a test result to the specified results JSON file."""
    file_path = os.path.join(output, f"results-{results_id}.json")

    if not os.path.exists(file_path):
        print(f"Error: Results file '{file_path}' does not exist.", file=sys.stderr)
        sys.exit(1)

    data = load_json(file_path)

    new_result = {
        "test": test,
        "group": group,
        "result": result,
        "link": f"{RESULTS_SERVER}/{RESULTS_FOLDER}/{results_id}/{folder_name}"
    }

    data["results"].append(new_result)

    save_json(file_path, data)
    print(f"Added test result to {file_path}")


def retrieve_devinfo(platform):
    with open('nipa-results.yaml', 'r') as file:
        data = yaml.safe_load(file)
        for record in data['platforms']:
            if record['name'] == platform:
                return record['device']
    return {}


def add_from_kernelci_node(id, output_folder):
    # This is LAVA job node
    lava_job = maestro_fetch_node(MAESTRO_API, id)
    parent = None
    # Search group job of tests
    children_jobs = maestro_fetch_children_nodes(MAESTRO_API, lava_job)
    for child in children_jobs:
        if child["kind"] == "job" and child["name"] != "setup":
            parent = child
            break

    if not parent:
        print(f"Error: No parent job found for node {id}", file=sys.stderr)
        sys.exit(errno.ENOENT)

    if parent["kind"] != "job":
        print(f"Error: Node {id} not a 'test' kind.", file=sys.stderr)
        sys.exit(errno.ENOENT)

    if parent["state"] != "done":
        print(f"Error: Job {id} didn't finish yet.", file=sys.stderr)
        sys.exit(errno.ENOENT)


    os.makedirs(output_folder, exist_ok=True)
    jsons_folder = os.path.join(output_folder, JSONS_FOLDER)
    os.makedirs(jsons_folder, exist_ok=True)
    results_folder = os.path.join(output_folder, RESULTS_FOLDER)
    os.makedirs(results_folder, exist_ok=True)

    if results_exist_in_manifest(jsons_folder, id):
        return

    # NOTE: should start be from the parent checkout?
    start =  convert_to_nipa_timestamp(parent["created"])
    end =  convert_to_nipa_timestamp(parent["updated"])
    branch = parent["data"]["kernel_revision"]["branch"]
    device_info = retrieve_devinfo(parent["data"]["platform"])
    results_json = create_results_file(jsons_folder, branch, start, end, parent["id"], device_info)
    parent_folder = os.path.join(results_folder, parent["id"])

    children = maestro_fetch_children_nodes(MAESTRO_API, parent)
    for node in children:
        # NOTE: we only support parent with 'test' child only for the time being
        if node["kind"] != "test":
            print(f"Error: Node {id} not a 'test' kind.", file=sys.stderr)
            sys.exit(errno.ENOENT)

        result = node["result"] if node["result"] == "pass" else "fail"
        group = parent["name"]
        test = node["name"]
        folder_name = f"{group}-{test.replace('/', '-')}"
        add_result(jsons_folder, parent["id"], group, test, result, folder_name)

        test_folder = os.path.join(parent_folder, folder_name)
        os.makedirs(test_folder, exist_ok=True)

        try:
            log_url = lava_job["artifacts"]["lava_log"]
        except KeyError:
            print(f"Error: No lava log found for node {id}", file=sys.stderr)
            sys.exit(errno.ENOENT)

        add_dashboard_link_file(test_folder, node["id"])
        download_and_extract_log(test_folder, log_url)

    add_to_manifest(jsons_folder, results_json, branch)


def main():
    global MAESTRO_API
    parser = argparse.ArgumentParser(description="NIPA Results Management")
    parser.add_argument("-o", "--output", default=DEFAULT_OUTPUT_DIR,
                        help="Output directory (default: netdev-results)")
    parser.add_argument("--id", type=str, help="KernelCI's Maestro node id of the result", required=True)
    parser.add_argument("--staging", help="Use staging Maestro API", action="store_true")

    args = parser.parse_args()
    if args.staging:
        MAESTRO_API = MAESTRO_STAGING_API

    add_from_kernelci_node(args.id, args.output)


if __name__ == "__main__":
    main()